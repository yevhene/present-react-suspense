<section>
  <h1>React Suspense</h1>

  <small>
    Yevhen Shemet<br />
    github: <a target="_blank" href="https://github.com/yevhene/present-react-suspense">yevhene/present-react-suspense</a>
  </small>
</section>

<section>
  <h2>React</h2>

  <section>
    <h3>Two problems</h3>

    <ul>
      <li>Local Resources</li>
      <li>Network Resources</li>
    </ul>
  </section>

  <section>
    <h3>React 16</h3>
  </section>
</section>

<section>
  <h2>Local Resources</h2>

  <section>
    <h3>Problem: One thread</h3>

    <h4>TODO: fiber</h4>
  </section>

  <section>
    <h3>Fiber</h3>

    <p>New Reconciliation Algorithm</p>
  </section>

  <section>
    <h3>Two Phases</h3>

    <ul>
      <li>Reconciliation</li>
      <li>Commit</li>
    </ul>
  </section>

  <section>
    <h3>Async Rendering</h3>

    <img src="images/perf-not-fiber.png" />
    <small>Not Fiber</small>

    <img src="images/perf-fiber.png" />
    <small>Fiber</small>
  </section>

  <section>
    <h3>Reconciliation Phase Callbacks</h3>

    <p>Can be called multiple times</p>

    <ul>
      <li>componentWillMount</li>
      <li>componentWillReceiveProps</li>
      <li>shouldComponentUpdate</li>
      <li>componentWillUpdate</li>
    </ul>
  </section>
</section>

<section>
  <h2>Callback Changes</h2>

  <section>
    <h3><strike>componentWillMount</strike></h3>
  </section>

  <section>
    <h3><strike>componentWillReceiveProps</strike></h3>

    <pre><code class="javascript" data-trim contenteditable>
class Conter extends Component {
  constructor(props) {
    super(props);
    state = { count: props.count };
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.count !== this.props.count) {
      this.setState({ count: nextProps.count });
    }
  }

  render() {
    return &lt;h1&gt;{this.state.count}&lt;/h1&gt;
  }
}
    </code></pre>
  </section>

  <section>
    <h3>static getDerivedStateFromProps</h3>

    <pre><code class="javascript" data-trim contenteditable>
class Conter extends Component {
  state = {};

  static getDerivedStateFromProps(nextProps, prevState) {
    return { count: nextProps.count };
  }

  render() {
    return &lt;h1&gt;{this.state.count}&lt;/h1&gt;
  }
}
    </code></pre>
  </section>

  <section>
    <h3><strike>componentWillUpdate</strike><h3>
  </section>

  <section>
    <h3>getSnapshotBeforeUpdate</h3>

    <pre><code class="javascript" data-trim contenteditable>
  getSnapshotBeforeUpdate(prevProps, prevState) {
    if (prevProps.list.length &lt; this.props.list.length) {
      const list = this.listRef.current;
      return list.scrollHeight - list.scrollTop;
    }
    return null;
  }

  componentDidUpdate(prevProps, prevState, snapshot) {
    if (snapshot !== null) {
      const list = this.listRef.current;
      list.scrollTop = list.scrollHeight - snapshot;
    }
  }
    </code></pre>
  </section>

  <section>
    <img src="images/react-lifecycle.jpg" />
  </section>

  <section>
    <h3>componentDidCatch</h3>

    <pre><code class="javascript" data-trim contenteditable>
class ErrorBound extends Component {
  state = { hasError: false };

  componentDidCatch(error, info) {
    this.setState(() =&gt; ({ hasError: true }))
  }

  render() {
    if (this.state.hasError) {
      return &lt;h1&gt;Error&lt;/h1&gt;
    }
    return props.children;
  }
}
    </code></pre>
  </section>
</section>

<section>
  <h2>Network Resources</h2>

  <section>
    <ul>
      <li>Data</li>
      <li>Assets</li>
      <li>Code</li>
    </ul>
  </section>

  <section>
    <h3>React Suspense</h3>

    <h4>Uniform approach</h3>
  </section>

  <section>
    <h2>Demo: suspense</h2>

    <p>Loading cascades</p>
  </section>
</section>

<section>
  <h2>React Suspense</h2>

  <section>
    <h3>This API is so raw ...</h3>

    <img src="images/raw-api.jpg" />
  </section>

  <section>
    <h3>Enable Suspense</h3>

    <pre><code class="javascript" data-trim contenteditable>
// Suspense
export const enableSuspense = true;
    </code></pre>

    <p>react/packages/shared/ReactFeatureFlags.js</p>
  </section>

  <section>
    <h3>Placeholder</h3>

    <pre><code class="javascript" data-trim contenteditable>
&lt;Placeholder fallback={&lt;div className="spinner"&gt;&lt;/div&gt;}&gt;
  &lt;Content /&gt;
&lt;/Placeholder&gt;
    </code></pre>
  </section>

  <section>
    <h3>How it works?</h3>

    <img src="images/suspense-mechanism.png" />
  </section>

  <section>
    <h2>Demo: poor-mans-suspense</h2>
  </section>

  <section>
    <h3>SlowContent</h3>

    <pre><code class="javascript" data-trim contenteditable>
const cache = { status: false };

function wait(time) {
  if (cache.status) {
    return;
  }
  cache.status = true;

  throw new Promise((resolve) =&gt;
    setTimeout(() =&gt; resolve(), time)
  );
}

function SlowContent(props) {
  wait(1500);
  return <h3>Slow Content</h3>;
}
    </code></pre>
  </section>

  <section>
    <h3>Placeholder</h3>

    <pre><code class="javascript" data-trim contenteditable>
class Placeholder extends Component {
  state = { isReady: true }

  componentDidCatch(e) {
    this.setState(() =&gt; ({ isReady: false }))
    if (!(e instanceof Promise)) throw e;
    e.then(() =&gt; this.setState(() =&gt; ({ isReady: true })))
  }

  render() {
    if (!this.state.isReady) {
      return this.props.placeholder;
    }

    return this.props.children;
  }
}
    </code></pre>
  </section>

  <section>
    <h3>React Implementation</h3>

    <pre><code class="javascript" data-trim contenteditable>
export const REACT_PLACEHOLDER_TYPE = hasSymbol
  ? Symbol.for('react.placeholder')
  : 0xead1;
    </code></pre>

    <p>react/packages/shared/ReactSymbols.js</p>
  </section>
</section>

<section>
  <h2>simple-cache-provider</h2>

  <section>
    <img src="images/simple-cache-provider-disclaimer.png" />
  </section>

  <section>
    <img src="images/what-the-fuck.jpg" />
  </section>

  <section>
    <h3>read</h3>

    <pre><code class="javascript" data-trim contenteditable>
import { createCache, createResource } from 'simple-cache-provider';

const cache = createCache();

export const studentFetcher = createResource(
  (id) =&gt; fetch(`http://localhost:3000/students/${id}`)
);

const student = studentFetcher.read(cache, 1)
    </code></pre>
  </section>

  <section>
    <h3>preload</h3>

    <pre><code class="javascript" data-trim contenteditable>
studentFetcher.preload(cache, 1)

// ...Later...
const student = studentFetcher.read(cache, 1)
    </code></pre>
  </section>

  <section>
    <h2>Demo: suspense</h2>

    <p>Preload groups</p>
  </section>
</section>

<section>
TODO:
two gifs
code splitting
unnecessary loading states
SSR
</section>

<section>
  <h2>Questions?</h2>
</section>
